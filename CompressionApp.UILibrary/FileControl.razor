@inject IFileSaverService FileSaver
@inject IFolderPickerService FolderPicker

<label>
	Pick File/s:
</label>

<InputFile OnChange="@LoadFiles" accept="*.*" multiple />

@foreach (var filePicked in FilesPicked)
	{
	<label>@filePicked.SourceFilename</label>
	}

<label>Compress To: @FileDestination?.DestinationFilename</label>
<button @onclick="CompressFileAsync">Compress File</button>

<label>Decompress To: @FileDestination?.DestinationFilename</label>
<button @onclick="DecompressFileAsync">Decompress File</button>

@code {
	private IEnumerable<FileSourceModel> FilesPicked { get; set; }
	private FileDestinationModel FileDestination { get; set; }
	private CancellationTokenSource? _cts;

	protected override async Task OnInitializedAsync()
	{
		FilesPicked ??= Enumerable.Empty<FileSourceModel>();
		FileDestination ??= new();
	}


	private void LoadFiles(InputFileChangeEventArgs e)
	{
		FilesPicked = e.GetMultipleFiles().Select(f => new FileSourceModel
			{
				SourceFilename = f.Name,
				SourceStream = f.OpenReadStream()
			});
	}

	// TODO: This logic should be in a service in the UI project
	private async Task CompressFileAsync()
	{
		_cts?.Cancel();
		_cts = new CancellationTokenSource();

		if (FilesPicked.Count() == 1)
		{
			var filePicked = FilesPicked.First();
			var originStream = filePicked.SourceStream;
			var tempCompressPath = Path.Combine(Path.GetTempPath(), "compressed.gz");
			GzipCompressionService gzip = new();
			await gzip.CompressFileAsync(originStream, tempCompressPath, _cts.Token);

			using var tempFileStream = File.OpenRead(tempCompressPath);

			FileDestination.DestinationFilename = await FileSaver.SaveFileAsync(
				filePicked.SourceFilename + ".gz", 
				directory: "", 
				tempFileStream, 
				_cts.Token);
		}
		else
		{
			var firstFilePicked = FilesPicked.First();
			var tempCompressPath = Path.Combine(Path.GetTempPath(), "compressed.zip");
			ZipCompressionService zip = new();
			await zip.CompressFiles(
			FilesPicked.Select(f => (f.SourceFilename, f.SourceStream)).ToArray(),
			tempCompressPath);

			using var tempFileStream = File.OpenRead(tempCompressPath);

			FileDestination.DestinationFilename = await FileSaver.SaveFileAsync(
				firstFilePicked.SourceFilename + ".zip",
				directory: "",
				tempFileStream,
				_cts.Token);
		}
	}

	private async Task DecompressFileAsync()
	{
		_cts?.Cancel();
		_cts = new CancellationTokenSource();

		FileDestination.DestinationFolder = await FolderPicker.PickFolderAsync(_cts.Token);

		GzipDecompressionService gzipDecompressionService = new();
		ZipDecompressionService zipDecompressionService = new();

		foreach (var file in FilesPicked)
		{
			if (Path.GetExtension(file.SourceFilename) == ".gz")
			{
				await gzipDecompressionService.DecompressFileFromStreamAsync(file.SourceStream, 
					Path.Combine(FileDestination.DestinationFolder, file.SourceFilename.TrimEnd('.', 'g', 'z')), _cts.Token);
			}
			else if (Path.GetExtension(file.SourceFilename) == ".zip")
			{
				await zipDecompressionService.DecompressFilesAsync(file.SourceStream, FileDestination.DestinationFolder);
			}
		}
	}
}

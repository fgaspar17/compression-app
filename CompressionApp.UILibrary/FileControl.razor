@inject IFilePickerService FilePicker
@inject IFileSaverService FileSaver

<label>
	Pick File/s: @fileModel?.SourceFilePath
</label>


<button @onclick="PickFileAsync">Pick File</button>

<label>Compress To: @fileModel?.DestinationFilePath</label>
<button @onclick="SaveFileAsync">Compress File</button>

@code {
	private FileModel fileModel = new();
	private CancellationTokenSource? _cts;


	private async Task PickFileAsync()
	{
		_cts?.Cancel();
		_cts = new CancellationTokenSource();
		fileModel.SourceFilePath = await FilePicker.PickFileAsync("Files to Compress", _cts.Token);
	}

	private async Task SaveFileAsync()
	{
		_cts?.Cancel();
		_cts = new CancellationTokenSource();

		var tempCompressPath = Path.Combine(Path.GetTempPath(), "compressed.gz");

		GzipCompressionService gzip = new();
		 await gzip.GetCompressionStreamAsync(fileModel.SourceFilePath, tempCompressPath, _cts.Token);

		using var tempFileStream = File.OpenRead(tempCompressPath);

		fileModel.DestinationFilePath = await FileSaver.SaveFileAsync(
			Path.GetFileNameWithoutExtension(fileModel.SourceFilePath) + ".gz", 
			Path.GetDirectoryName(fileModel.SourceFilePath), 
			tempFileStream, 
			_cts.Token);
	}
}

@inject IFileCompressService FileCompresser
@inject IFileDecompressService FileDecompresser

<div class="file-upload-section">
	<InputFile OnChange="@LoadFiles" accept="*.*" multiple />

	@foreach (var filePicked in FilesPicked)
	{
		<label>@filePicked.SourceFilename</label>
	}
</div>

<div class="action-buttons">
	<button @onclick="CompressFileAsync">Compress File</button>
	<button @onclick="DecompressFileAsync">Decompress File</button>
</div>


@code {
	private IEnumerable<FileSourceModel> FilesPicked { get; set; }
	private FileDestinationModel FileDestination { get; set; }
	private CancellationTokenSource? _cts;

	protected override async Task OnInitializedAsync()
	{
		FilesPicked ??= Enumerable.Empty<FileSourceModel>();
		FileDestination ??= new();
	}


	private void LoadFiles(InputFileChangeEventArgs e)
	{
		FilesPicked = e.GetMultipleFiles().Select(f => new FileSourceModel
			{
				SourceFilename = f.Name,
				SourceStream = f.OpenReadStream()
			});
	}

	private async Task CompressFileAsync()
	{
		_cts?.Cancel();
		_cts = new CancellationTokenSource();

		FileDestination.DestinationFilename = await FileCompresser.CompressFiles(
			FilesPicked.Select(f => (f.SourceFilename, f.SourceStream)), 
			_cts.Token);
	}

	private async Task DecompressFileAsync()
	{
		_cts?.Cancel();
		_cts = new CancellationTokenSource();

		FileDestination.DestinationFolder = await FileDecompresser.DecompressFiles(
			FilesPicked.Select(f => (f.SourceFilename, f.SourceStream)),
			_cts.Token);
	}
}
